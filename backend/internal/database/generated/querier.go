// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

type Querier interface {
	//CreateUser
	//
	//  INSERT INTO
	//    users (
	//      id,
	//      email,
	//      name,
	//      home_region_code,
	//      email_verified_at
	//    )
	//  VALUES
	//    ($1, $2, $3, $4, $5)
	//  RETURNING
	//    id,
	//    email,
	//    name,
	//    email_verified_at,
	//    home_region_code,
	//    created_at,
	//    updated_at
	CreateUser(ctx context.Context, arg CreateUserParams) (User, error)
	//GetActiveSports
	//
	//  SELECT
	//    id,
	//    code,
	//    name,
	//    is_active,
	//    created_at,
	//    updated_at
	//  FROM
	//    sports
	//  WHERE
	//    is_active = TRUE
	//  ORDER BY
	//    name
	GetActiveSports(ctx context.Context) ([]Sport, error)
	//GetAllRegions
	//
	//  SELECT
	//    jis_code,
	//    name,
	//    name_kana,
	//    region_type,
	//    parent_jis_code,
	//    created_at,
	//    updated_at
	//  FROM
	//    regions
	//  ORDER BY
	//    jis_code
	GetAllRegions(ctx context.Context) ([]Region, error)
	//GetAllSports
	//
	//  SELECT
	//    id,
	//    code,
	//    name,
	//    is_active,
	//    created_at,
	//    updated_at
	//  FROM
	//    sports
	//  ORDER BY
	//    name
	GetAllSports(ctx context.Context) ([]Sport, error)
	//GetMunicipalitiesByPrefecture
	//
	//  SELECT
	//    jis_code,
	//    name,
	//    name_kana,
	//    region_type,
	//    parent_jis_code,
	//    created_at,
	//    updated_at
	//  FROM
	//    regions
	//  WHERE
	//    region_type = 'municipality'
	//    AND parent_jis_code = $1
	//  ORDER BY
	//    jis_code
	GetMunicipalitiesByPrefecture(ctx context.Context, parentJisCode sql.NullString) ([]Region, error)
	//GetPrefectures
	//
	//  SELECT
	//    jis_code,
	//    name,
	//    name_kana,
	//    region_type,
	//    parent_jis_code,
	//    created_at,
	//    updated_at
	//  FROM
	//    regions
	//  WHERE
	//    region_type = 'prefecture'
	//  ORDER BY
	//    jis_code
	GetPrefectures(ctx context.Context) ([]Region, error)
	//GetRegionByCode
	//
	//  SELECT
	//    jis_code,
	//    name,
	//    name_kana,
	//    region_type,
	//    parent_jis_code,
	//    created_at,
	//    updated_at
	//  FROM
	//    regions
	//  WHERE
	//    jis_code = $1
	GetRegionByCode(ctx context.Context, jisCode string) (Region, error)
	//GetRegionHierarchy
	//
	//  SELECT
	//    r.jis_code,
	//    r.name,
	//    r.name_kana,
	//    r.region_type,
	//    r.parent_jis_code,
	//    p.name AS parent_name,
	//    r.created_at,
	//    r.updated_at
	//  FROM
	//    regions r
	//    LEFT JOIN regions p ON r.parent_jis_code = p.jis_code
	//  ORDER BY
	//    r.region_type,
	//    r.jis_code
	GetRegionHierarchy(ctx context.Context) ([]GetRegionHierarchyRow, error)
	//GetSportByCode
	//
	//  SELECT
	//    id,
	//    code,
	//    name,
	//    is_active,
	//    created_at,
	//    updated_at
	//  FROM
	//    sports
	//  WHERE
	//    code = $1
	GetSportByCode(ctx context.Context, code string) (Sport, error)
	//GetSportByID
	//
	//  SELECT
	//    id,
	//    code,
	//    name,
	//    is_active,
	//    created_at,
	//    updated_at
	//  FROM
	//    sports
	//  WHERE
	//    id = $1
	GetSportByID(ctx context.Context, id uuid.UUID) (Sport, error)
	//GetUserByEmail
	//
	//  SELECT
	//    id,
	//    email,
	//    name,
	//    email_verified_at,
	//    home_region_code,
	//    created_at,
	//    updated_at
	//  FROM
	//    users
	//  WHERE
	//    email = $1
	GetUserByEmail(ctx context.Context, email string) (User, error)
	//GetUserByID
	//
	//  SELECT
	//    id,
	//    email,
	//    name,
	//    email_verified_at,
	//    home_region_code,
	//    created_at,
	//    updated_at
	//  FROM
	//    users
	//  WHERE
	//    id = $1
	GetUserByID(ctx context.Context, id uuid.UUID) (User, error)
	//UpdateUser
	//
	//  UPDATE users
	//  SET
	//    name = $2,
	//    home_region_code = $3,
	//    updated_at = current_timestamp
	//  WHERE
	//    id = $1
	//  RETURNING
	//    id,
	//    email,
	//    name,
	//    email_verified_at,
	//    home_region_code,
	//    created_at,
	//    updated_at
	UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error)
	//UpdateUserEmailVerified
	//
	//  UPDATE users
	//  SET
	//    email_verified_at = $2,
	//    updated_at = current_timestamp
	//  WHERE
	//    id = $1
	//  RETURNING
	//    id,
	//    email,
	//    name,
	//    email_verified_at,
	//    home_region_code,
	//    created_at,
	//    updated_at
	UpdateUserEmailVerified(ctx context.Context, arg UpdateUserEmailVerifiedParams) (User, error)
}

var _ Querier = (*Queries)(nil)
