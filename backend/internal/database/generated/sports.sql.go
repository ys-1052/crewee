// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: sports.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const getActiveSports = `-- name: GetActiveSports :many
SELECT
  id,
  code,
  name,
  is_active,
  created_at,
  updated_at
FROM
  sports
WHERE
  is_active = TRUE
ORDER BY
  name
`

// GetActiveSports
//
//	SELECT
//	  id,
//	  code,
//	  name,
//	  is_active,
//	  created_at,
//	  updated_at
//	FROM
//	  sports
//	WHERE
//	  is_active = TRUE
//	ORDER BY
//	  name
func (q *Queries) GetActiveSports(ctx context.Context) ([]Sport, error) {
	rows, err := q.db.QueryContext(ctx, getActiveSports)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Sport{}
	for rows.Next() {
		var i Sport
		if err := rows.Scan(
			&i.ID,
			&i.Code,
			&i.Name,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllSports = `-- name: GetAllSports :many
SELECT
  id,
  code,
  name,
  is_active,
  created_at,
  updated_at
FROM
  sports
ORDER BY
  name
`

// GetAllSports
//
//	SELECT
//	  id,
//	  code,
//	  name,
//	  is_active,
//	  created_at,
//	  updated_at
//	FROM
//	  sports
//	ORDER BY
//	  name
func (q *Queries) GetAllSports(ctx context.Context) ([]Sport, error) {
	rows, err := q.db.QueryContext(ctx, getAllSports)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Sport{}
	for rows.Next() {
		var i Sport
		if err := rows.Scan(
			&i.ID,
			&i.Code,
			&i.Name,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSportByCode = `-- name: GetSportByCode :one
SELECT
  id,
  code,
  name,
  is_active,
  created_at,
  updated_at
FROM
  sports
WHERE
  code = $1
`

// GetSportByCode
//
//	SELECT
//	  id,
//	  code,
//	  name,
//	  is_active,
//	  created_at,
//	  updated_at
//	FROM
//	  sports
//	WHERE
//	  code = $1
func (q *Queries) GetSportByCode(ctx context.Context, code string) (Sport, error) {
	row := q.db.QueryRowContext(ctx, getSportByCode, code)
	var i Sport
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.Name,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getSportByID = `-- name: GetSportByID :one
SELECT
  id,
  code,
  name,
  is_active,
  created_at,
  updated_at
FROM
  sports
WHERE
  id = $1
`

// GetSportByID
//
//	SELECT
//	  id,
//	  code,
//	  name,
//	  is_active,
//	  created_at,
//	  updated_at
//	FROM
//	  sports
//	WHERE
//	  id = $1
func (q *Queries) GetSportByID(ctx context.Context, id uuid.UUID) (Sport, error) {
	row := q.db.QueryRowContext(ctx, getSportByID, id)
	var i Sport
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.Name,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
