// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO
  users (
    id,
    email,
    name,
    home_region_code,
    email_verified_at
  )
VALUES
  ($1, $2, $3, $4, $5)
RETURNING
  id,
  email,
  name,
  email_verified_at,
  home_region_code,
  created_at,
  updated_at
`

type CreateUserParams struct {
	ID              uuid.UUID    `json:"id"`
	Email           string       `json:"email"`
	Name            string       `json:"name"`
	HomeRegionCode  string       `json:"home_region_code"`
	EmailVerifiedAt sql.NullTime `json:"email_verified_at"`
}

// CreateUser
//
//	INSERT INTO
//	  users (
//	    id,
//	    email,
//	    name,
//	    home_region_code,
//	    email_verified_at
//	  )
//	VALUES
//	  ($1, $2, $3, $4, $5)
//	RETURNING
//	  id,
//	  email,
//	  name,
//	  email_verified_at,
//	  home_region_code,
//	  created_at,
//	  updated_at
func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.Email,
		arg.Name,
		arg.HomeRegionCode,
		arg.EmailVerifiedAt,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.EmailVerifiedAt,
		&i.HomeRegionCode,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT
  id,
  email,
  name,
  email_verified_at,
  home_region_code,
  created_at,
  updated_at
FROM
  users
WHERE
  email = $1
`

// GetUserByEmail
//
//	SELECT
//	  id,
//	  email,
//	  name,
//	  email_verified_at,
//	  home_region_code,
//	  created_at,
//	  updated_at
//	FROM
//	  users
//	WHERE
//	  email = $1
func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.EmailVerifiedAt,
		&i.HomeRegionCode,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT
  id,
  email,
  name,
  email_verified_at,
  home_region_code,
  created_at,
  updated_at
FROM
  users
WHERE
  id = $1
`

// GetUserByID
//
//	SELECT
//	  id,
//	  email,
//	  name,
//	  email_verified_at,
//	  home_region_code,
//	  created_at,
//	  updated_at
//	FROM
//	  users
//	WHERE
//	  id = $1
func (q *Queries) GetUserByID(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.EmailVerifiedAt,
		&i.HomeRegionCode,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET
  name = $2,
  home_region_code = $3,
  updated_at = current_timestamp
WHERE
  id = $1
RETURNING
  id,
  email,
  name,
  email_verified_at,
  home_region_code,
  created_at,
  updated_at
`

type UpdateUserParams struct {
	ID             uuid.UUID `json:"id"`
	Name           string    `json:"name"`
	HomeRegionCode string    `json:"home_region_code"`
}

// UpdateUser
//
//	UPDATE users
//	SET
//	  name = $2,
//	  home_region_code = $3,
//	  updated_at = current_timestamp
//	WHERE
//	  id = $1
//	RETURNING
//	  id,
//	  email,
//	  name,
//	  email_verified_at,
//	  home_region_code,
//	  created_at,
//	  updated_at
func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser, arg.ID, arg.Name, arg.HomeRegionCode)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.EmailVerifiedAt,
		&i.HomeRegionCode,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUserEmailVerified = `-- name: UpdateUserEmailVerified :one
UPDATE users
SET
  email_verified_at = $2,
  updated_at = current_timestamp
WHERE
  id = $1
RETURNING
  id,
  email,
  name,
  email_verified_at,
  home_region_code,
  created_at,
  updated_at
`

type UpdateUserEmailVerifiedParams struct {
	ID              uuid.UUID    `json:"id"`
	EmailVerifiedAt sql.NullTime `json:"email_verified_at"`
}

// UpdateUserEmailVerified
//
//	UPDATE users
//	SET
//	  email_verified_at = $2,
//	  updated_at = current_timestamp
//	WHERE
//	  id = $1
//	RETURNING
//	  id,
//	  email,
//	  name,
//	  email_verified_at,
//	  home_region_code,
//	  created_at,
//	  updated_at
func (q *Queries) UpdateUserEmailVerified(ctx context.Context, arg UpdateUserEmailVerifiedParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUserEmailVerified, arg.ID, arg.EmailVerifiedAt)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.EmailVerifiedAt,
		&i.HomeRegionCode,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
